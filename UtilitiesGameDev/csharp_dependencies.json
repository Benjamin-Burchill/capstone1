{
  "classes": {
    "AIController": {
      "name": "AIController",
      "filepath": "Assets/Scripts/AIController.cs",
      "namespace": "",
      "base_classes": [
        "MonoBehaviour"
      ],
      "interfaces": [],
      "dependencies": [
        "GameState",
        "AIDifficultySettings",
        "PlayerController",
        "Player",
        "Tile",
        "Map",
        "Unit"
      ],
      "dependents": [
        "TeamData",
        "PlayerController",
        "Player",
        "TurnManager",
        "PlayerData"
      ],
      "fields": [
        "using UnityEngine",
        "float thinkingTime",
        "float actionDelay",
        "AIDifficultySettings easySettings",
        "AIDifficultySettings mediumSettings",
        "AIDifficultySettings hardSettings",
        "GameState gameState",
        "Map mapController",
        "PlayerController playerController",
        "Player currentAIPlayer",
        "Action onTurnCompleteCallback",
        "List<Unit> aiUnitsToMove",
        "int currentUnitIndex",
        "AIDifficultySettings settings",
        "act aiUnitsToMove",
        "return easySettings",
        "return mediumSettings",
        "return hardSettings",
        "return easySettings",
        "List<Unit> activeUnits"
      ],
      "methods": [
        "void Start()",
        "set InitializeDefaultSettings()",
        "void InitializeDefaultSettings()",
        "void ExecuteAITurn()",
        "sequence StartCoroutine()",
        "AIDifficultySettings GetSettingsForPlayer()",
        "List<Unit> GetActiveAIUnits()",
        "IEnumerator ExecuteAITurnSequence()",
        "new WaitForSeconds()",
        "unit while()",
        "the unit()",
        "new WaitForSeconds()",
        "return StartCoroutine()",
        "new WaitForSeconds()",
        "IEnumerator ExecuteUnitAction()",
        "return StartCoroutine()",
        "range if()",
        "return StartCoroutine()",
        "return StartCoroutine()",
        "Unit FindBestTarget()"
      ],
      "properties": []
    },
    "AIDifficultySettings": {
      "name": "AIDifficultySettings",
      "filepath": "Assets/Scripts/AIController.cs",
      "namespace": "",
      "base_classes": [],
      "interfaces": [],
      "dependencies": [
        "GameState",
        "AIDifficultySettings",
        "PlayerController",
        "Player",
        "Tile",
        "Map",
        "Unit"
      ],
      "dependents": [
        "AIDifficultySettings",
        "AIController"
      ],
      "fields": [
        "using UnityEngine",
        "float thinkingTime",
        "float actionDelay",
        "AIDifficultySettings easySettings",
        "AIDifficultySettings mediumSettings",
        "AIDifficultySettings hardSettings",
        "GameState gameState",
        "Map mapController",
        "PlayerController playerController",
        "Player currentAIPlayer",
        "Action onTurnCompleteCallback",
        "List<Unit> aiUnitsToMove",
        "int currentUnitIndex",
        "AIDifficultySettings settings",
        "act aiUnitsToMove",
        "return easySettings",
        "return mediumSettings",
        "return hardSettings",
        "return easySettings",
        "List<Unit> activeUnits"
      ],
      "methods": [
        "void Start()",
        "set InitializeDefaultSettings()",
        "void InitializeDefaultSettings()",
        "void ExecuteAITurn()",
        "sequence StartCoroutine()",
        "AIDifficultySettings GetSettingsForPlayer()",
        "List<Unit> GetActiveAIUnits()",
        "IEnumerator ExecuteAITurnSequence()",
        "new WaitForSeconds()",
        "unit while()",
        "the unit()",
        "new WaitForSeconds()",
        "return StartCoroutine()",
        "new WaitForSeconds()",
        "IEnumerator ExecuteUnitAction()",
        "return StartCoroutine()",
        "range if()",
        "return StartCoroutine()",
        "return StartCoroutine()",
        "Unit FindBestTarget()"
      ],
      "properties": []
    },
    "CamScript": {
      "name": "CamScript",
      "filepath": "Assets/Scripts/CamScript.cs",
      "namespace": "",
      "base_classes": [
        "MonoBehaviour"
      ],
      "interfaces": [],
      "dependencies": [
        "Map",
        "InputManager"
      ],
      "dependents": [],
      "fields": [
        "using UnityEngine",
        "Transform camTransform",
        "Vector2 position",
        "Camera mainCamera",
        "Map map",
        "InputManager inputManager",
        "float speed",
        "float speed",
        "float speed",
        "float speed",
        "transform mainCamera",
        "component map",
        "events inputManager",
        "float scroll"
      ],
      "methods": [
        "void zoomCameraIn()",
        "5 if()",
        "void zoomCameraOut()",
        "30 if()",
        "camera if()",
        "else if()",
        "else if()",
        "else if()",
        "void moveCameraUp()",
        "map if()",
        "new Vector3()",
        "void moveCameraDown()",
        "map if()",
        "new Vector3()",
        "void moveCameraLeft()",
        "map if()",
        "new Vector3()",
        "void moveCameraRight()",
        "map if()",
        "new Vector3()"
      ],
      "properties": []
    },
    "GameState": {
      "name": "GameState",
      "filepath": "Assets/Scripts/GameState.cs",
      "namespace": "",
      "base_classes": [
        "MonoBehaviour"
      ],
      "interfaces": [],
      "dependencies": [
        "Unit",
        "Tile",
        "UIManager",
        "Map"
      ],
      "dependents": [
        "AIDifficultySettings",
        "TeamData",
        "PlayerController",
        "Player",
        "Tile",
        "UIManager",
        "for",
        "TurnManager",
        "Unit",
        "PlayerData",
        "TurnUIController",
        "AIController"
      ],
      "fields": [
        "using UnityEngine",
        "int currentPlayerTurn",
        "int totalPlayers",
        "int turnNumber",
        "GamePhase currentPhase",
        "Unit selectedUnit",
        "Tile selectedTile",
        "List<Tile> movementRangeTiles",
        "List<Tile> attackRangeTiles",
        "Action<int> OnTurnChanged",
        "Action<int> OnPlayerChanged",
        "Action<GamePhase> OnPhaseChanged",
        "Action<Unit> OnUnitSelected",
        "Action<Tile> OnTileSelected",
        "Map mapController",
        "UIManager uiManager",
        "components mapController",
        "unit selectedUnit",
        "Vector2 unitTilePos",
        "int movementRange"
      ],
      "methods": [
        "player turn()",
        "void Start()",
        "state StartNewGame()",
        "void StartNewGame()",
        "void SelectUnit()",
        "unit if()",
        "void SelectTile()",
        "phase switch()",
        "void ShowMovementRange()",
        "new Vector2()",
        "bounds if()",
        "distance if()",
        "void ClearMovementRange()",
        "bool CanMoveToTile()",
        "bool CanAttackTile()",
        "void MoveUnitToTile()",
        "ranges ClearMovementRange()",
        "attack if()",
        "void ShowAttackRange()",
        "new Vector2()"
      ],
      "properties": []
    },
    "HybridMap": {
      "name": "HybridMap",
      "filepath": "Assets/Scripts/HybridMap.cs",
      "namespace": "",
      "base_classes": [
        "MonoBehaviour"
      ],
      "interfaces": [],
      "dependencies": [
        "Unit",
        "TileLogic",
        "TileData"
      ],
      "dependents": [
        "TileLogic"
      ],
      "fields": [
        "using UnityEngine",
        "Tilemap tilemap",
        "TilemapRenderer tilemapRenderer",
        "TilemapCollider2D tilemapCollider",
        "bool enableTileLogic",
        "Texture2D mapImage",
        "TextAsset mappingFile",
        "bool optimizedLogicSpawning",
        "Vector2 tileSize",
        "Dictionary<Vector3Int, GameObject> logicTileObjects",
        "Dictionary<Vector3Int, Unit> unitPositions",
        "Dictionary<Color, TileBase> colorToTileMapping",
        "private set",
        "private set",
        "private set",
        "private set",
        "Vector3Int lastHoveredTile",
        "Camera mainCamera",
        "structures tileDataGrid",
        "bounds mapMinDim"
      ],
      "methods": [
        "Tilemap Rendering()",
        "Logic System()",
        "GameObject logic()",
        "new Vector2()",
        "void Start()",
        "void InitializeHybridSystem()",
        "new Vector2()",
        "mapping BuildColorToTileMapping()",
        "void BuildColorToTileMapping()",
        "values if()",
        "new Color()",
        "color RGB()",
        "TileBase FindTileAssetByName()",
        "void GenerateHybridMap()",
        "visual tilemap()",
        "where needed()",
        "void GenerateVisualTilemap()",
        "tilemap operation()",
        "tile data()",
        "new Vector3Int()"
      ],
      "properties": [
        "int mapWidth",
        "int mapHeight",
        "Vector2 mapMaxDim",
        "Vector2 mapMinDim"
      ]
    },
    "KeyBinding": {
      "name": "KeyBinding",
      "filepath": "Assets/Scripts/InputManager.cs",
      "namespace": "",
      "base_classes": [],
      "interfaces": [],
      "dependencies": [
        "KeyBinding"
      ],
      "dependents": [
        "KeyBindingRowData",
        "SettingsUI",
        "InputManager",
        "KeyBinding"
      ],
      "fields": [
        "using UnityEngine",
        "using System",
        "string actionName",
        "KeyCode keyCode",
        "KeyCode alternativeKey",
        "KeyCode altKey",
        "List<KeyBinding> keyBindings",
        "bool persistKeyBindings",
        "Dictionary<string, KeyBinding> keyBindingMap",
        "Action OnSettingsToggle",
        "Action OnCameraMoveUp",
        "Action OnCameraMoveDown",
        "Action OnCameraMoveLeft",
        "Action OnCameraMoveRight",
        "Action OnCameraZoomIn",
        "Action OnCameraZoomOut",
        "Action<float> OnMouseScroll",
        "private set",
        "float scroll",
        "return binding"
      ],
      "methods": [
        "bool IsPressed()",
        "bool IsDown()",
        "bool IsUp()",
        "void Awake()",
        "check if()",
        "else if()",
        "void InitializeKeyBindings()",
        "bindings if()",
        "dictionary BuildKeyBindingMap()",
        "bindings if()",
        "void BuildKeyBindingMap()",
        "void Update()",
        "void HandleInputActions()",
        "toggle if()",
        "Camera movement()",
        "void HandleMouseInput()",
        "bool IsActionPressed()",
        "bool IsActionDown()",
        "bool IsActionUp()",
        "KeyBinding GetKeyBinding()"
      ],
      "properties": [
        "InputManager Instance"
      ]
    },
    "InputManager": {
      "name": "InputManager",
      "filepath": "Assets/Scripts/InputManager.cs",
      "namespace": "",
      "base_classes": [
        "MonoBehaviour"
      ],
      "interfaces": [],
      "dependencies": [
        "KeyBinding"
      ],
      "dependents": [
        "CamScript",
        "SettingsUI",
        "KeyBindingRowData"
      ],
      "fields": [
        "using UnityEngine",
        "using System",
        "string actionName",
        "KeyCode keyCode",
        "KeyCode alternativeKey",
        "KeyCode altKey",
        "List<KeyBinding> keyBindings",
        "bool persistKeyBindings",
        "Dictionary<string, KeyBinding> keyBindingMap",
        "Action OnSettingsToggle",
        "Action OnCameraMoveUp",
        "Action OnCameraMoveDown",
        "Action OnCameraMoveLeft",
        "Action OnCameraMoveRight",
        "Action OnCameraZoomIn",
        "Action OnCameraZoomOut",
        "Action<float> OnMouseScroll",
        "private set",
        "float scroll",
        "return binding"
      ],
      "methods": [
        "public KeyBinding()",
        "bool IsPressed()",
        "bool IsDown()",
        "bool IsUp()",
        "void Awake()",
        "check if()",
        "else if()",
        "void InitializeKeyBindings()",
        "bindings if()",
        "new KeyBinding()",
        "new KeyBinding()",
        "new KeyBinding()",
        "new KeyBinding()",
        "new KeyBinding()",
        "new KeyBinding()",
        "new KeyBinding()",
        "dictionary BuildKeyBindingMap()",
        "bindings if()",
        "void BuildKeyBindingMap()",
        "void Update()"
      ],
      "properties": [
        "InputManager Instance"
      ]
    },
    "Map": {
      "name": "Map",
      "filepath": "Assets/Scripts/Map.cs",
      "namespace": "",
      "base_classes": [
        "MonoBehaviour"
      ],
      "interfaces": [],
      "dependencies": [
        "Tile"
      ],
      "dependents": [
        "GameState",
        "AIDifficultySettings",
        "CamScript",
        "for",
        "Unit",
        "AIController"
      ],
      "fields": [
        "using System",
        "using UnityEngine",
        "Vector2 tileSize",
        "TextAsset mappingFile",
        "Texture2D mapimg",
        "Texture2D initUnitImg",
        "int mapWidth",
        "int mapHeight",
        "Vector2 mapMaxDim",
        "Vector2 mapMinDim",
        "Dictionary<Color, GameObject> colorToTilePrefabMapping",
        "Camera mainCamera",
        "GameObject bestMatch",
        "return bestMatch",
        "float tolerance",
        "GameObject closestMatch",
        "float closestDistance",
        "Color keyColor",
        "float distance",
        "return closestMatch"
      ],
      "methods": [
        "tile prefabs()",
        "GameObject FindTileForColor()",
        "exact match()",
        "GameObject ClassifyColorByRange()",
        "color RGB()",
        "Water classification()",
        "water if()",
        "Green classification()",
        "Brown classification()",
        "hills if()",
        "tile if()",
        "bool IsBlueish()",
        "tolerance return()",
        "bool IsGreenish()",
        "degrees return()",
        "bool IsBrownish()",
        "degrees return()",
        "GameObject FindTileByName()",
        "Dictionary<Color, GameObject> parseMappingFromTxt()",
        "an array()"
      ],
      "properties": []
    },
    "OptimizedMap": {
      "name": "OptimizedMap",
      "filepath": "Assets/Scripts/OptimizedMap.cs",
      "namespace": "",
      "base_classes": [
        "MonoBehaviour"
      ],
      "interfaces": [],
      "dependencies": [
        "Unit",
        "Tile"
      ],
      "dependents": [],
      "fields": [
        "using UnityEngine",
        "Tilemap tilemap",
        "TilemapRenderer tilemapRenderer",
        "TilemapCollider2D tilemapCollider",
        "Texture2D mapImage",
        "TextAsset mappingFile",
        "Vector2 tileSize",
        "Dictionary<Color, TileBase> colorToTileMapping",
        "Dictionary<Vector3Int, TerrainType> tileTerrainTypes",
        "Dictionary<Vector3Int, Unit> tileUnits",
        "private set",
        "private set",
        "private set",
        "private set",
        "Vector3Int lastHoveredTile",
        "Camera mainCamera",
        "structures colorToTileMapping",
        "GameObject tilemapObj",
        "components tilemap",
        "string tileName"
      ],
      "methods": [
        "Tile assets()",
        "tile assets()",
        "new Vector2()",
        "void Start()",
        "void InitializeTilemapSystem()",
        "assigned if()",
        "dictionary BuildColorToTileMapping()",
        "void CreateTilemapGameObject()",
        "new GameObject()",
        "void BuildColorToTileMapping()",
        "values if()",
        "new Color()",
        "color RGB()",
        "TileBase FindTileAssetByName()",
        "void GenerateOptimizedMap()",
        "new Vector2()",
        "new Vector3Int()",
        "at once()",
        "new BoundsInt()",
        "TileBase GetTileForColor()"
      ],
      "properties": [
        "int mapWidth",
        "int mapHeight",
        "Vector2 mapMaxDim",
        "Vector2 mapMinDim"
      ]
    },
    "Player": {
      "name": "Player",
      "filepath": "Assets/Scripts/PlayerController.cs",
      "namespace": "",
      "base_classes": [],
      "interfaces": [],
      "dependencies": [
        "Player",
        "GameState",
        "Unit",
        "AIController"
      ],
      "dependents": [
        "AIDifficultySettings",
        "TeamData",
        "PlayerController",
        "Player",
        "for",
        "TurnManager",
        "Unit",
        "PlayerData",
        "AIController"
      ],
      "fields": [
        "using UnityEngine",
        "int playerID",
        "string playerName",
        "PlayerType playerType",
        "Color playerColor",
        "bool isDefeated",
        "List<Unit> units",
        "return true",
        "return false",
        "List<Player> players",
        "float aiActionDelay",
        "float aiUnitDelay",
        "GameState gameState",
        "AIController aiController",
        "Action<Player> OnPlayerTurnStarted",
        "Action<Player> OnPlayerTurnEnded",
        "Action<Player> OnPlayerDefeated",
        "Player currentPlayer",
        "Player currentPlayer",
        "return null"
      ],
      "methods": [
        "of players()",
        "bool IsAI()",
        "bool HasUnitsLeft()",
        "AI actions()",
        "void Start()",
        "GameState if()",
        "void InitializePlayers()",
        "this if()",
        "Player 1()",
        "Player 2()",
        "Player 3()",
        "void OnPlayerTurnChanged()",
        "turn if()",
        "for input()",
        "void StartAITurn()",
        "turn Invoke()",
        "void OnAITurnComplete()",
        "void EndCurrentPlayerTurn()",
        "conditions CheckGameEnd()",
        "Player GetCurrentPlayer()"
      ],
      "properties": []
    },
    "PlayerController": {
      "name": "PlayerController",
      "filepath": "Assets/Scripts/PlayerController.cs",
      "namespace": "",
      "base_classes": [
        "MonoBehaviour"
      ],
      "interfaces": [],
      "dependencies": [
        "Player",
        "GameState",
        "Unit",
        "AIController"
      ],
      "dependents": [
        "AIDifficultySettings",
        "AIController"
      ],
      "fields": [
        "using UnityEngine",
        "int playerID",
        "string playerName",
        "PlayerType playerType",
        "Color playerColor",
        "bool isDefeated",
        "List<Unit> units",
        "return true",
        "return false",
        "List<Player> players",
        "float aiActionDelay",
        "float aiUnitDelay",
        "GameState gameState",
        "AIController aiController",
        "Action<Player> OnPlayerTurnStarted",
        "Action<Player> OnPlayerTurnEnded",
        "Action<Player> OnPlayerDefeated",
        "Player currentPlayer",
        "Player currentPlayer",
        "return null"
      ],
      "methods": [
        "of players()",
        "public Player()",
        "bool IsAI()",
        "bool HasUnitsLeft()",
        "AI actions()",
        "void Start()",
        "GameState if()",
        "void InitializePlayers()",
        "this if()",
        "Player 1()",
        "new Player()",
        "Player 2()",
        "new Player()",
        "Player 3()",
        "new Player()",
        "void OnPlayerTurnChanged()",
        "turn if()",
        "for input()",
        "void StartAITurn()",
        "turn Invoke()"
      ],
      "properties": []
    },
    "SettingsUI": {
      "name": "SettingsUI",
      "filepath": "Assets/Scripts/SettingsUI.cs",
      "namespace": "",
      "base_classes": [
        "MonoBehaviour"
      ],
      "interfaces": [],
      "dependencies": [
        "KeyBindingRowData",
        "InputManager",
        "KeyBinding"
      ],
      "dependents": [],
      "fields": [
        "using UnityEngine",
        "using TMPro",
        "GameObject settingsPanel",
        "GameObject topPanel",
        "GameObject bottomPanel",
        "Transform keyBindingContainer",
        "GameObject keyBindingRowPrefab",
        "TextMeshProUGUI settingsTitle",
        "Button closeButton",
        "Button resetDefaultsButton",
        "Button applyButton",
        "Slider masterVolumeSlider",
        "TextMeshProUGUI volumeText",
        "List<GameObject> keyBindingRows",
        "InputManager inputManager",
        "bool isSettingsOpen",
        "string currentlyRebindingAction",
        "reference inputManager",
        "float currentVolume",
        "Canvas canvas"
      ],
      "methods": [
        "settings panel()",
        "void Start()",
        "elements InitializeUI()",
        "initially if()",
        "void InitializeUI()",
        "assigned if()",
        "title if()",
        "setting if()",
        "rows CreateKeyBindingUI()",
        "void CreateSettingsPanelStructure()",
        "new GameObject()",
        "new Color()",
        "void SetupEventListeners()",
        "void CreateKeyBindingUI()",
        "rows ClearKeyBindingRows()",
        "void CreateKeyBindingRow()",
        "new GameObject()",
        "components SetupKeyBindingRowComponents()",
        "void SetupKeyBindingRowComponents()",
        "new GameObject()"
      ],
      "properties": []
    },
    "KeyBindingRowData": {
      "name": "KeyBindingRowData",
      "filepath": "Assets/Scripts/SettingsUI.cs",
      "namespace": "",
      "base_classes": [
        "MonoBehaviour"
      ],
      "interfaces": [],
      "dependencies": [
        "KeyBindingRowData",
        "InputManager",
        "KeyBinding"
      ],
      "dependents": [
        "SettingsUI",
        "KeyBindingRowData"
      ],
      "fields": [
        "using UnityEngine",
        "using TMPro",
        "GameObject settingsPanel",
        "GameObject topPanel",
        "GameObject bottomPanel",
        "Transform keyBindingContainer",
        "GameObject keyBindingRowPrefab",
        "TextMeshProUGUI settingsTitle",
        "Button closeButton",
        "Button resetDefaultsButton",
        "Button applyButton",
        "Slider masterVolumeSlider",
        "TextMeshProUGUI volumeText",
        "List<GameObject> keyBindingRows",
        "InputManager inputManager",
        "bool isSettingsOpen",
        "string currentlyRebindingAction",
        "reference inputManager",
        "float currentVolume",
        "Canvas canvas"
      ],
      "methods": [
        "settings panel()",
        "void Start()",
        "elements InitializeUI()",
        "initially if()",
        "void InitializeUI()",
        "assigned if()",
        "title if()",
        "setting if()",
        "rows CreateKeyBindingUI()",
        "void CreateSettingsPanelStructure()",
        "new GameObject()",
        "new Color()",
        "void SetupEventListeners()",
        "void CreateKeyBindingUI()",
        "rows ClearKeyBindingRows()",
        "void CreateKeyBindingRow()",
        "new GameObject()",
        "components SetupKeyBindingRowComponents()",
        "void SetupKeyBindingRowComponents()",
        "new GameObject()"
      ],
      "properties": []
    },
    "Tile": {
      "name": "Tile",
      "filepath": "Assets/Scripts/Tile.cs",
      "namespace": "",
      "base_classes": [
        "MonoBehaviour"
      ],
      "interfaces": [],
      "dependencies": [
        "Unit",
        "GameState"
      ],
      "dependents": [
        "GameState",
        "OptimizedMap",
        "AIDifficultySettings",
        "Map",
        "for",
        "Unit",
        "TurnUIController",
        "AIController"
      ],
      "fields": [
        "using UnityEngine",
        "Sprite baseTexture",
        "Sprite selectedTexture",
        "Sprite shadedTexture",
        "Color colorCode",
        "string type",
        "bool isPassable",
        "float defenseBonus",
        "int movementCost",
        "int tileX",
        "int tileY",
        "Unit unitOnTile",
        "SpriteRenderer spriteRenderer",
        "return unitOnTile",
        "return defenseBonus",
        "return movementCost",
        "GameState gameState",
        "bonus movementCost",
        "through break",
        "Impassable defenseBonus"
      ],
      "methods": [
        "void changeTileTexture()",
        "tiles texture()",
        "shaded if()",
        "new Vector3()",
        "else if()",
        "new Vector3()",
        "else if()",
        "new Vector3()",
        "void Start()",
        "void SetUnit()",
        "Unit GetUnit()",
        "bool HasUnit()",
        "bool IsPassable()",
        "float GetDefenseBonus()",
        "int GetMovementCost()",
        "int GetX()",
        "int GetY()",
        "void OnMouseDown()",
        "tile coordinates()",
        "void Initialize()"
      ],
      "properties": []
    },
    "TileData": {
      "name": "TileData",
      "filepath": "Assets/Scripts/TileData.cs",
      "namespace": "",
      "base_classes": [],
      "interfaces": [],
      "dependencies": [
        "TileDataSerialized",
        "Unit",
        "TileData"
      ],
      "dependents": [
        "TileDataSerialized",
        "HybridMap",
        "TileLogic",
        "TileData"
      ],
      "fields": [
        "using UnityEngine",
        "Vector3Int position",
        "TerrainType terrainType",
        "TileBase tileAsset",
        "int movementCost",
        "float defenseBonus",
        "bool isPassable",
        "bool needsLogicObject",
        "Unit occupyingUnit",
        "bool isVisible",
        "bool isExplored",
        "bool isHighlighted",
        "Color highlightColor",
        "Dictionary<string, object> customProperties",
        "return keys",
        "bool IsOccupied",
        "bool CanMoveThrough",
        "bool IsImpassable",
        "float baseCost",
        "modifiers break"
      ],
      "methods": [
        "void SetCustomProperty()",
        "return default()",
        "return default()",
        "bool HasProperty()",
        "void RemoveProperty()",
        "property keys()",
        "int GetMovementCostForUnit()",
        "type if()",
        "modifiers switch()",
        "hills if()",
        "else if()",
        "float GetDefenseBonusForUnit()",
        "type if()",
        "terrain switch()",
        "hills if()",
        "on hills()",
        "defense bonus()",
        "terrain if()",
        "string ToString()",
        "TileDataSerialized ToSerialized()"
      ],
      "properties": []
    },
    "TileDataSerialized": {
      "name": "TileDataSerialized",
      "filepath": "Assets/Scripts/TileData.cs",
      "namespace": "",
      "base_classes": [],
      "interfaces": [],
      "dependencies": [
        "TileDataSerialized",
        "Unit",
        "TileData"
      ],
      "dependents": [
        "TileDataSerialized",
        "TileData"
      ],
      "fields": [
        "using UnityEngine",
        "Vector3Int position",
        "TerrainType terrainType",
        "TileBase tileAsset",
        "int movementCost",
        "float defenseBonus",
        "bool isPassable",
        "bool needsLogicObject",
        "Unit occupyingUnit",
        "bool isVisible",
        "bool isExplored",
        "bool isHighlighted",
        "Color highlightColor",
        "Dictionary<string, object> customProperties",
        "return keys",
        "bool IsOccupied",
        "bool CanMoveThrough",
        "bool IsImpassable",
        "float baseCost",
        "modifiers break"
      ],
      "methods": [
        "void SetCustomProperty()",
        "return default()",
        "return default()",
        "bool HasProperty()",
        "void RemoveProperty()",
        "property keys()",
        "int GetMovementCostForUnit()",
        "type if()",
        "modifiers switch()",
        "hills if()",
        "else if()",
        "float GetDefenseBonusForUnit()",
        "type if()",
        "terrain switch()",
        "hills if()",
        "on hills()",
        "defense bonus()",
        "terrain if()",
        "string ToString()",
        "TileDataSerialized ToSerialized()"
      ],
      "properties": []
    },
    "TileLogic": {
      "name": "TileLogic",
      "filepath": "Assets/Scripts/TileLogic.cs",
      "namespace": "",
      "base_classes": [
        "MonoBehaviour"
      ],
      "interfaces": [],
      "dependencies": [
        "Unit",
        "HybridMap",
        "TileData"
      ],
      "dependents": [
        "HybridMap"
      ],
      "fields": [
        "using UnityEngine",
        "TileData tileData",
        "HybridMap hybridMap",
        "float updateInterval",
        "bool enableCustomBehaviors",
        "float lastUpdateTime",
        "string resourceType",
        "int currentPop",
        "int citySize",
        "int growthRate",
        "bool harvestable",
        "Color glowColor",
        "float intensity",
        "float waveOffset",
        "TerrainType newTerrain",
        "effects break",
        "effects break",
        "bool hasWalls",
        "bool harvestable",
        "string resourceType"
      ],
      "methods": [
        "s logic()",
        "void Initialize()",
        "override OnTileInitialized()",
        "void OnTileInitialized()",
        "type switch()",
        "void InitializeCityTile()",
        "void InitializeResourceTile()",
        "void InitializeSpecialTile()",
        "void Update()",
        "performance if()",
        "logic OnTileUpdate()",
        "void OnTileUpdate()",
        "properties HandleCityLogic()",
        "void HandleCityLogic()",
        "growth if()",
        "void HandleResourceLogic()",
        "void HandleSpecialEffects()",
        "glow effect()",
        "void HandleAnimations()",
        "animations if()"
      ],
      "properties": []
    },
    "UIManager": {
      "name": "UIManager",
      "filepath": "Assets/Scripts/UIManager.cs",
      "namespace": "",
      "base_classes": [
        "MonoBehaviour"
      ],
      "interfaces": [],
      "dependencies": [
        "Unit",
        "GameState"
      ],
      "dependents": [
        "GameState",
        "PlayerData",
        "TeamData",
        "TurnManager"
      ],
      "fields": [
        "using UnityEngine",
        "using TMPro",
        "Canvas gameCanvas",
        "GameObject turnInfoPanel",
        "GameObject unitInfoPanel",
        "GameObject controlsPanel",
        "TextMeshProUGUI turnNumberText",
        "TextMeshProUGUI currentPlayerText",
        "TextMeshProUGUI gamePhaseText",
        "Button endTurnButton",
        "TextMeshProUGUI unitNameText",
        "TextMeshProUGUI unitHealthText",
        "TextMeshProUGUI unitStatsText",
        "TextMeshProUGUI unitMovementText",
        "TextMeshProUGUI controlsText",
        "Button deselectButton",
        "GameState gameState",
        "state gameState",
        "string playerName",
        "Color playerColor"
      ],
      "methods": [
        "void Start()",
        "events if()",
        "events if()",
        "UI UpdateAllDisplays()",
        "void UpdateAllDisplays()",
        "void UpdateTurnDisplay()",
        "void UpdatePlayerDisplay()",
        "void UpdatePhaseDisplay()",
        "void UpdateUnitDisplay()",
        "info if()",
        "else if()",
        "void UpdateControlsDisplay()",
        "string GetPlayerName()",
        "Color GetPlayerColor()",
        "void EndTurn()",
        "void DeselectUnit()",
        "void ShowMessage()",
        "void ShowCombatResult()",
        "void OnDestroy()",
        "events if()"
      ],
      "properties": []
    },
    "for": {
      "name": "for",
      "filepath": "Assets/Scripts/Unit.cs",
      "namespace": "",
      "base_classes": [],
      "interfaces": [],
      "dependencies": [
        "Player",
        "GameState",
        "Tile",
        "Map"
      ],
      "dependents": [],
      "fields": [
        "using UnityEngine",
        "UnitType unitType",
        "int owner",
        "string unitName",
        "int maxHealth",
        "int currentHealth",
        "int attackPower",
        "int defense",
        "int movementRange",
        "int attackRange",
        "bool hasMoved",
        "bool hasAttacked",
        "Sprite selectedSprite",
        "Sprite normalSprite",
        "bool isSelected",
        "Tile currentTile",
        "SpriteRenderer spriteRenderer",
        "GameState gameState",
        "TextMesh healthDisplay",
        "components spriteRenderer"
      ],
      "methods": [
        "Health bar()",
        "void Start()",
        "display CreateHealthDisplay()",
        "tile UpdateCurrentTile()",
        "void CreateHealthDisplay()",
        "health display()",
        "new GameObject()",
        "new Vector3()",
        "Color GetPlayerColor()",
        "players switch()",
        "void UpdateCurrentTile()",
        "void SetSelected()",
        "selection if()",
        "feedback if()",
        "void MoveToTile()",
        "tile if()",
        "new Vector2()",
        "new Vector3()",
        "to tile()",
        "void TakeDamage()"
      ],
      "properties": []
    },
    "Unit": {
      "name": "Unit",
      "filepath": "Assets/Scripts/Unit.cs",
      "namespace": "",
      "base_classes": [
        "MonoBehaviour"
      ],
      "interfaces": [],
      "dependencies": [
        "Player",
        "GameState",
        "Tile",
        "Map"
      ],
      "dependents": [
        "TileDataSerialized",
        "GameState",
        "OptimizedMap",
        "AIDifficultySettings",
        "TeamData",
        "PlayerController",
        "Player",
        "Tile",
        "UIManager",
        "HybridMap",
        "TurnManager",
        "PlayerData",
        "TileData",
        "TurnUIController",
        "AIController",
        "TileLogic"
      ],
      "fields": [
        "using UnityEngine",
        "UnitType unitType",
        "int owner",
        "string unitName",
        "int maxHealth",
        "int currentHealth",
        "int attackPower",
        "int defense",
        "int movementRange",
        "int attackRange",
        "bool hasMoved",
        "bool hasAttacked",
        "Sprite selectedSprite",
        "Sprite normalSprite",
        "bool isSelected",
        "Tile currentTile",
        "SpriteRenderer spriteRenderer",
        "GameState gameState",
        "TextMesh healthDisplay",
        "components spriteRenderer"
      ],
      "methods": [
        "Health bar()",
        "void Start()",
        "display CreateHealthDisplay()",
        "tile UpdateCurrentTile()",
        "void CreateHealthDisplay()",
        "health display()",
        "new GameObject()",
        "new Vector3()",
        "Color GetPlayerColor()",
        "players switch()",
        "void UpdateCurrentTile()",
        "void SetSelected()",
        "selection if()",
        "feedback if()",
        "void MoveToTile()",
        "tile if()",
        "new Vector2()",
        "new Vector3()",
        "to tile()",
        "void TakeDamage()"
      ],
      "properties": []
    },
    "TurnManager": {
      "name": "TurnManager",
      "filepath": "Assets/Scripts/ExperimentalScripts/TurnManager.cs",
      "namespace": "",
      "base_classes": [
        "MonoBehaviour"
      ],
      "interfaces": [],
      "dependencies": [
        "GameState",
        "TeamData",
        "Player",
        "UIManager",
        "Unit",
        "PlayerData",
        "AIController"
      ],
      "dependents": [
        "TurnUIController"
      ],
      "fields": [
        "using UnityEngine",
        "GameMode currentGameMode",
        "List<PlayerData> turnOrder",
        "int currentPlayerIndex",
        "int roundNumber",
        "bool useTeams",
        "List<TeamData> teams",
        "float turnTimeLimit",
        "bool autoEndTurnWhenDone",
        "InitiativeMode initiativeMode",
        "float currentTurnTime",
        "bool isProcessingTurn",
        "Action<PlayerData> OnPlayerTurnStart",
        "Action<PlayerData> OnPlayerTurnEnd",
        "Action<int> OnRoundStart",
        "Action<TeamData> OnTeamVictory",
        "Action OnGameEnd",
        "GameState gameState",
        "AIController aiController",
        "UIManager uiManager"
      ],
      "methods": [
        "in seconds()",
        "void Start()",
        "void InitializeGameMode()",
        "void SetupSinglePlayer()",
        "AI if()",
        "void SetupLocalMultiplayer()",
        "void SetupCoopCampaign()",
        "void SetupVersus()",
        "void SetupTeamBattle()",
        "UI SetupCoopCampaign()",
        "Color GetPlayerColor()",
        "void DetermineInitiative()",
        "current order()",
        "teams if()",
        "unit speed()",
        "void StartFirstTurn()",
        "void StartPlayerTurn()",
        "player ResetPlayerUnits()",
        "turns if()",
        "controls EnablePlayerControls()"
      ],
      "properties": []
    },
    "PlayerData": {
      "name": "PlayerData",
      "filepath": "Assets/Scripts/ExperimentalScripts/TurnManager.cs",
      "namespace": "",
      "base_classes": [],
      "interfaces": [],
      "dependencies": [
        "GameState",
        "TeamData",
        "Player",
        "UIManager",
        "Unit",
        "PlayerData",
        "AIController"
      ],
      "dependents": [
        "TurnUIController",
        "PlayerData",
        "TeamData",
        "TurnManager"
      ],
      "fields": [
        "using UnityEngine",
        "GameMode currentGameMode",
        "List<PlayerData> turnOrder",
        "int currentPlayerIndex",
        "int roundNumber",
        "bool useTeams",
        "List<TeamData> teams",
        "float turnTimeLimit",
        "bool autoEndTurnWhenDone",
        "InitiativeMode initiativeMode",
        "float currentTurnTime",
        "bool isProcessingTurn",
        "Action<PlayerData> OnPlayerTurnStart",
        "Action<PlayerData> OnPlayerTurnEnd",
        "Action<int> OnRoundStart",
        "Action<TeamData> OnTeamVictory",
        "Action OnGameEnd",
        "GameState gameState",
        "AIController aiController",
        "UIManager uiManager"
      ],
      "methods": [
        "in seconds()",
        "void Start()",
        "void InitializeGameMode()",
        "void SetupSinglePlayer()",
        "AI if()",
        "void SetupLocalMultiplayer()",
        "void SetupCoopCampaign()",
        "void SetupVersus()",
        "void SetupTeamBattle()",
        "UI SetupCoopCampaign()",
        "Color GetPlayerColor()",
        "void DetermineInitiative()",
        "current order()",
        "teams if()",
        "unit speed()",
        "void StartFirstTurn()",
        "void StartPlayerTurn()",
        "player ResetPlayerUnits()",
        "turns if()",
        "controls EnablePlayerControls()"
      ],
      "properties": []
    },
    "TeamData": {
      "name": "TeamData",
      "filepath": "Assets/Scripts/ExperimentalScripts/TurnManager.cs",
      "namespace": "",
      "base_classes": [],
      "interfaces": [],
      "dependencies": [
        "GameState",
        "TeamData",
        "Player",
        "UIManager",
        "Unit",
        "PlayerData",
        "AIController"
      ],
      "dependents": [
        "TurnUIController",
        "PlayerData",
        "TeamData",
        "TurnManager"
      ],
      "fields": [
        "using UnityEngine",
        "GameMode currentGameMode",
        "List<PlayerData> turnOrder",
        "int currentPlayerIndex",
        "int roundNumber",
        "bool useTeams",
        "List<TeamData> teams",
        "float turnTimeLimit",
        "bool autoEndTurnWhenDone",
        "InitiativeMode initiativeMode",
        "float currentTurnTime",
        "bool isProcessingTurn",
        "Action<PlayerData> OnPlayerTurnStart",
        "Action<PlayerData> OnPlayerTurnEnd",
        "Action<int> OnRoundStart",
        "Action<TeamData> OnTeamVictory",
        "Action OnGameEnd",
        "GameState gameState",
        "AIController aiController",
        "UIManager uiManager"
      ],
      "methods": [
        "in seconds()",
        "void Start()",
        "void InitializeGameMode()",
        "void SetupSinglePlayer()",
        "AI if()",
        "void SetupLocalMultiplayer()",
        "void SetupCoopCampaign()",
        "void SetupVersus()",
        "void SetupTeamBattle()",
        "UI SetupCoopCampaign()",
        "Color GetPlayerColor()",
        "void DetermineInitiative()",
        "current order()",
        "teams if()",
        "unit speed()",
        "void StartFirstTurn()",
        "void StartPlayerTurn()",
        "player ResetPlayerUnits()",
        "turns if()",
        "controls EnablePlayerControls()"
      ],
      "properties": []
    },
    "TurnUIController": {
      "name": "TurnUIController",
      "filepath": "Assets/Scripts/ExperimentalScripts/TurnUIController.cs",
      "namespace": "",
      "base_classes": [
        "MonoBehaviour"
      ],
      "interfaces": [],
      "dependencies": [
        "GameState",
        "TeamData",
        "Tile",
        "TurnManager",
        "Unit",
        "PlayerData"
      ],
      "dependents": [],
      "fields": [
        "using UnityEngine",
        "using TMPro",
        "TextMeshProUGUI currentPlayerText",
        "TextMeshProUGUI roundNumberText",
        "TextMeshProUGUI turnTimerText",
        "TextMeshProUGUI teamInfoText",
        "TextMeshProUGUI phaseText",
        "Button endTurnButton",
        "Button undoMoveButton",
        "Button pauseButton",
        "Button concedeButton",
        "Button autoPlayButton",
        "bool hideEndTurnForAI",
        "bool conditionalUndo",
        "bool allowAutoPlay",
        "Color humanPlayerColor",
        "Color aiPlayerColor",
        "Color allyColor",
        "Color enemyColor",
        "Color warningColor"
      ],
      "methods": [
        "void Start()",
        "events if()",
        "listeners if()",
        "void OnPlayerTurnStart()",
        "display if()",
        "players if()",
        "type UpdateButtonStates()",
        "modes if()",
        "panel if()",
        "modes if()",
        "transition StartCoroutine()",
        "void OnRoundStart()",
        "rounds if()",
        "void OnPhaseChanged()",
        "void OnUnitSelected()",
        "undo if()",
        "void Update()",
        "applicable if()",
        "remaining if()",
        "else if()"
      ],
      "properties": []
    }
  },
  "namespaces": {},
  "statistics": {
    "total_classes": 24,
    "total_dependencies": 90,
    "total_namespaces": 0,
    "most_dependent": [
      [
        "AIController",
        7
      ],
      [
        "AIDifficultySettings",
        7
      ],
      [
        "TurnManager",
        7
      ],
      [
        "PlayerData",
        7
      ],
      [
        "TeamData",
        7
      ],
      [
        "TurnUIController",
        6
      ],
      [
        "GameState",
        4
      ],
      [
        "Player",
        4
      ],
      [
        "PlayerController",
        4
      ],
      [
        "for",
        4
      ]
    ],
    "most_depended": [
      [
        "Unit",
        16
      ],
      [
        "GameState",
        12
      ],
      [
        "Player",
        9
      ],
      [
        "Tile",
        8
      ],
      [
        "Map",
        6
      ],
      [
        "AIController",
        5
      ],
      [
        "KeyBinding",
        4
      ],
      [
        "TileData",
        4
      ],
      [
        "UIManager",
        4
      ],
      [
        "PlayerData",
        4
      ]
    ],
    "average_dependencies": 3.75
  }
}